import socket

def create_header():
    header = []
    header.append(int(input("Enter the version (0-15): ")))
    header.append(input("Enter the source address (0.0.0.0-255.255.255.255): "))
    header.append(int(input("Enter the source port (0-65535): ")))
    header.append(input("Enter the destination address (0.0.0.0-255.255.255.255): "))
    header.append(int(input("Enter the destination port (0-65535): ")))
    header.append(int(input("Enter the sequence number (0-4294967295): ")))
    header.append(int(input("Enter the acknowledgment number (0-4294967295): ")))
    header.append(int(input("Enter the flags (0-65535): ")))
    header.append(int(input("Enter the header length (0-65535): ")))
    header.append(int(input("Enter the checksum (0-65535): ")))

    return header

def fragment_datagram(datagram, mtu):
    fragments = []
    data_offset = 0
    while data_offset < len(datagram):
        fragment = datagram[data_offset:data_offset + mtu]
        fragments.append(fragment)
        data_offset += mtu
    return fragments

def print_offset(fragments, mtu):
    offset = 0
    for fragment in fragments:
        print("Fragment offset:", offset)
        offset += mtu

def main():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    server_address = ('localhost', 12345)

    header = create_header()
    data = input("Enter the data: ").encode()
    header_bytes = b''.join(str(field).encode() for field in header)
    datagram = header_bytes + data
    mtu = int(input("Enter the MTU size: "))
    fragments = fragment_datagram(datagram, mtu)

    print_offset(fragments, mtu)

    for fragment in fragments:
        client_socket.sendto(fragment, server_address)
        print("Fragment sent")

    print("Datagram sent successfully")

if _name_ == "_main_":
    main()
