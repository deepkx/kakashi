
PL/SQL Programs 

1.	Write a program to interchange the salaries of employee 120 and 122.
Declare
   V_salary_120   employees.salary%type;
Begin
  Select  salary into v_salary_120
  From employees where  employee_id = 120;

  Update employees set salary  = ( select salary from employees where employee_id = 122)
  Where employee_id = 120;

  Update employees set salary  =  v_salary_120  Where employee_id = 122;

  Commit;
End;



declare


v_salary employees.salary%type;



begin

select salary into v_salary from employees where empid = 120; 

update employees
set salary = ( select salary from employees where empid = 122)
where empid  = 120;

update employees
set salary = v_salary
where empid  = 122;

commit;
end;


2.	Increase the salary of employee 115 based on the following conditions: If experience is more than 10 years, increase salary by 20% If experience is greater than 5 years, increase salary by 10% Otherwise 5% Case by Expression.




declare
    v_exp  number(2);
    v_hike number(5,2);
begin
    select  floor((sysdate-hire_date) / 365 ) into v_exp
    from employees
    where employee_id = 115;

    v_hike := 1.05;

    case
      when  v_exp > 10 then
            v_hike := 1.20;
      when  v_exp > 5  then
            v_hike := 1.10;
    end case;

    update employees set salary = salary * v_hike
    where employee_id = 115;
end;


declare
v_exp number(10);


begin

select floor((sysdate - hdate)/360) into v_exp from employees where empid = 115; 

case

when v_exp > 20 then

update employees
set salary = salary*1.20
where empid = 115;

when v_exp > 10 then

update employees
set salary = salary*1.1
where empid= 115;

else
update employees
set salary = salary*1.05
where empid = 115;

end case;
end;




3.	Change commission percentage as follows for employee with ID = 150. If salary is more than 10000 then commission is 0.4%, if Salary is less than 10000 but experience is more than 10 years then 0.35%, if salary is less than 3000 then commission is 0.25%. In the remaining cases commission is 0.15%.


declare
    v_salary  employees.salary%type;
    v_exp     number(2);
    v_cp      number(5,2);
begin
    select  v_salary,  floor ( (sysdate-hire_date)/365) into v_salary, v_exp
    from  employees
    where employee_id = 150;

    if v_salary > 10000 then
           v_cp := 0.4;
    elsif  v_exp > 10 then
           v_cp := 0.35;
    elsif  v_salary < 3000 then
           v_cp := 0.25;
    else
           v_cp := 0.15;

    end if;

    update employees set commission_pct = v_cp
    where employee_id = 150;
end;




declare

v_salary employees.salary%type;
v_exp number(6);

begin

select salary into v_salary from employees where empid = 150;



select floor((sysdate-hdate)/360) into  v_exp from employees where empid = 150;


case
when v_salary > 10000 then

update employees
set comm = 0.7
where empid = 150;

when v_salary <10000 and v_exp > 10 then

update employees
set comm = 0.35
where empid = 150;

when v_salary < 1000 then

update employees
set comm = 0.5
where empid = 150;


else

update employees
set comm = 0.15
where empid = 150;


end case;
end;



4.	Find out the name of the employee and name of the department for the employee who is managing for employee 103.
declare
    v_name     employees.first_name%type;
    v_deptname departments.department_name%type;
begin
    select  first_name , department_name into v_name, v_deptname
    from  employees join departments using (department_id)
    where employee_id = ( select manager_id from employees    where employee_id = 103);

    dbms_output.put_line(v_name);
    dbms_output.put_line(v_deptname);

end;



declare

v_name empe.empname%type;
v_dept empe.dept%type;

begin

select empname,dept into v_name,v_dept from empe where empid in(select mgr from empe where empid = 103);

dbms_output.put_line('employee name is  : '||v_name);

dbms_output.put_line('dept is  :  '||v_dept);

end;








5.	Display missing employee IDs.
declare
     v_min  number(3);
     v_max  number(3);
     v_c    number(1);
begin
     select min(employee_id), max(employee_id) into v_min, v_max
     from employees;

     for i in  v_min + 1 .. v_max - 1
     loop
           select count(*) into v_c
           from employees
           where employee_id = i;

           if  v_c = 0 then
                dbms_output.put_line(i);
           end if;
    end loop;

end;



declare

v_min number(3);
v_max number(3);
v_count number(3);

begin

select min(empid),max(empid) into v_min,v_max from empee;

for i in v_min..v_max

loop

    select count(*) into v_count from empee where empid  = i;
    
    if v_count = 0 then
    
    dbms_output.put_line(i);
    end if;
end loop;
end;

6.	Display the year in which maximum number of employees joined along with how many joined in each month in that year.
declare
      v_year  number(4);
      v_c     number(2);
begin
      select  to_char(hire_date,'yyyy') into v_year
      from  employees
      group by to_char(hire_date,'yyyy')
      having count(*) =
             ( select  max( count(*))
               from  employees
               group by to_char(hire_date,'yyyy'));

      dbms_output.put_line('Year : ' || v_year);

      for month in 1 .. 12
      loop
          select  count(*) into v_c
          from employees
          where  to_char(hire_date,'mm') = month and to_char(hire_date,'yyyy') = v_year;

          dbms_output.put_line('Month : ' || to_char(month) || ' Employees : ' || to_char(v_c));

     end loop;
end;


declare
v_max number(6);
v_c number(6);
v_a date;
v_b number(3);
begin




select extract(year from hdate) into v_max from empee i group by extract(year from hdate) having count(empid) = 
(select max(count(empid))j from empee group by extract(year from hdate));

dbms_output.put_line(v_max);

end;









--select extract(year from hdate) into v_max from empee  group by extract(year from hdate) having count(empid) = 
--(select max(count(empid)) from empee group by extract(year from hdate));

select max(count(empid)) into v_c from empee group by extract(year from hdate);
for i in 1..v_c
loop
select empid  from empee where extract(year from empid) = v_max and extract(month from hdate) = i;
--dbms_output.put_line(v_a||v_b);
end loop;
end;













7.	Change salary of employee 130 to the salary of the employee with first name ‘Joe’. If Joe is not found then take average salary of all employees. If more than one employee with first name ‘Joe’ is found then take the least salary of the employees with first name Joe.
declare
    v_salary  employees.salary%type;
begin
     select salary into v_salary
     from employees where first_name = 'Joe';

     update employees set salary = v_salary
     where employee_id = 130;
exception
     when no_data_found then
       update employees set salary = (select avg(salary) from employees)
     where employee_id = 130;
end;

declare

v_c number(3);
v_a number(6);
v_s number(3);
v_l number(3);



begin


select count(empid) into v_c from empee where fname = 'joe';



if v_c = 0 then

select avg(salary) into v_a from empee;

update empee
set salary = v_a
where empid = 130;


elsif v_c = 1 then

select salary into v_s from empee where fname = 'joe';

update empee
set salary = v_s
where empid = 130;


elsif v_c > 1 then

select min(salary)into v_l from empee where fname = 'joe';

update empee
set salary = v_l
where empid = 130;

end if;

end;














8.	Display Job Title and Name of the Employee who joined the job first day.
declare
       cursor  jobscur is select  job_id, job_title from jobs;
	   v_name  employees.first_name%type;
begin
       for jobrec in jobscur
	   loop
	         select first_name into v_name
             from employees
             where hire_date = ( select min(hire_date) from employees where job_id = jobrec.job_id)
			 and  job_id = jobrec.job_id;

             dbms_output.put_line( jobrec.job_title || '-' || v_name);
	   end loop;
end;
9.	Display 5th and 10th employees in Employees table.
declare
     cursor empcur is
        select employee_id, first_name
        from employees;
begin
     for emprec  in empcur
     loop
         if empcur%rowcount > 4 then
              dbms_output.put_line( emprec.first_name);
              exit  when   empcur%rowcount > 10;
         end if;
     end loop;
end;
10.	Update salary of an employee based on department and commission percentage. If department is 40 increase salary by 10%. If department is 70 then 15%, if commission is more than .3% then 5% otherwise 10%.
declare
    cursor empcur is
     select employee_id, department_id, commission_pct
     from employees;
    v_hike  number(2);
begin
    for emprec in empcur
    loop
         if  emprec.department_id = 40 then
              v_hike := 10;
         elsif emprec.department_id = 70 then
              v_hike := 15;
         elsif emprec.commission_pct  > 0.30 then
              v_hike := 5;
         else
              v_hike := 10;
         end if;

         update employees set salary = salary + salary * v_hike/100
         where employee_id = emprec.employee_id;
    end loop;
end;
11.	Create a function that takes department ID and returns the name of the manager of the department.
create or replace function get_dept_manager_name(deptid number)
return varchar is
   v_name  employees.first_name%type;
begin
   select first_name into v_name
   from employees
   where  employee_id = ( select manager_id from departments where department_id = deptid);

   return v_name;
end;
12.	Create a function that takes employee ID and return the number of jobs done by the employee in the past.
create or replace function get_no_of_jobs_done(empid number)
return number is
   v_count  number(2);
begin
   select count(*) into v_count
   from job_history
   where  employee_id = empid;

   return v_count;
end;
13.	Create a procedure that takes department ID and changes the manager ID for the department to the employee in the department with highest salary. (Use Exceptions)
create or replace procedure change_dept_manager(deptid number)
is
   v_empid  employees.employee_id%type;
begin
   select employee_id  into v_empid
   from employees
   where  salary = ( select max(salary) from employees where department_id = deptid)
     and department_id = deptid;

   update departments set manager_id = v_empid
   where  department_id = deptid;
end;
14.	Create a function that takes a manager ID and return the names of employees who report to this manager. The names must be returned as a string with comma separating names.
create or replace function get_employees_for_manager(manager number)
return varchar2
is
   v_employees varchar2(1000) := '';
   cursor empcur is
      select  first_name from employees
      where   manager_id = manager;
begin

     for emprec in empcur
     loop
         v_employees :=  v_employees ||  ',' || emprec.first_name;
     end loop;
     -- remove extra  , at the beginning
     return  ltrim(v_employees,',');
end;
15.	Ensure no changes can be made to EMPLOYEES table before 6am and after 10pm in a day.
create or replace trigger  trg_employees_time_check
before update or insert or delete
on employees
for each row
begin
   if  to_char(sysdate,'hh24') < 6 or to_char(sysdate,'hh24') > 10 then
         raise_application_error(-20111,'Sorry! No change can be made before 6 AM and after 10 PM');
   end if;
end;
16.	Create a Trigger to ensure the salary of the employee is not decreased.
create or replace trigger  trg_employees_salary_check
before update
on employees
for each row
begin
   if  :old.salary > :new.salary then
         raise_application_error(-20111,'Sorry! Salary can not be decreased!');
   end if;
end;
17.	Whenever the job is changed for an employee write the following details into job history. Employee ID, old job ID, old department ID, hire date of the employee for start date, system date for end date. But if a row is already present for employee job history then the start date should be the end date of that row +1.
create or replace trigger trg_log_job_change
after update of job_id
on employees
for each row
declare
    v_enddate   date;
    v_startdate date;
begin
   -- find out whether the employee has any row in job_history table
   select max(end_date) into v_enddate
   from job_history
   where employee_id = :old.employee_id;

   if v_enddate is null then
      v_startdate := :old.hire_date;
   else
      v_startdate := v_enddate + 1;
   end if;

   insert into  job_history values (:old.employee_id, v_startdate, sysdate, :old.job_id, :old.department_id);
end;

Note: Before testing the above trigger, you need to disable UPDATE_JOB_HISTORY trigger, which is already present in HR account, as it does the same.


