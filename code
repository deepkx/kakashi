import heapq

def dijkstra(graph, start):
    distances = {router: float('inf') for router in graph}
    distances[start] = 0
    pq = [(0, start)]
    prev = {}

    while pq:
        dist, current_router = heapq.heappop(pq)
        if dist > distances[current_router]:
            continue

        for neighbor, weight in graph[current_router].items():
            distance = dist + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))
                prev[neighbor] = current_router

    return distances, prev

graph = {
    '1': {'2': 5, '4': 6},
    '2': {'1':5, '3': 8, '5': 9, '6': 8},
    '3': {'2': 8, '5': 6, '8': 15},
    '4': {'1': 6, '6': 4, '7': 9},
    '5': {'2': 9, '3': 6, '9': 13},
    '6': {'4': 4, '8': 14, '2': 8, '7': 6},
    '7': {'4': 9, '6': 6, '9': 11},
    '8': {'3': 15, '6': 14, '10': 9},
    '9': {'5': 13, '7': 11, '10': 6, '11': 5, '12': 12},
    '10': {'8': 9, '9': 6},
    '11': {'9': 5},
    '12': {'9': 12}
}


start = '1'
distances, prev = dijkstra(graph, start)

print(f"Shortest path from {start} to each router:")
for router in graph:
    path = []
    current = router
    while current != start:
        path.insert(0, current)
        current = prev[current]
    path.insert(0, start)
    print(f"{router}: {' -> '.join(path)}\t\t\t, distance {distances[router]}")
