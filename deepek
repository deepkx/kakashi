import heapq


def dijkstra(graph, start):
    """
    Dijkstra's shortest path algorithm with path reconstruction.

    :param graph: a dictionary representing the graph in adjacency list format
    :param start: the starting node
    :return: a tuple containing the distance vector, next hop, and path for each node
    """
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    next_hop = {node: None for node in graph}
    path = {node: [] for node in graph}
    heap = [(0, start, [])]

    while heap:
        (distance, current_node, current_path) = heapq.heappop(heap)

        if distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node].items():
            distance_to_neighbor = distance + weight
            path_to_neighbor = current_path + [current_node]

            if distance_to_neighbor < distances[neighbor]:
                distances[neighbor] = distance_to_neighbor
                next_hop[neighbor] = current_node
                path[neighbor] = path_to_neighbor
                heapq.heappush(heap, (distance_to_neighbor, neighbor, path_to_neighbor))

    return distances, next_hop, path


# Example graph
graph = {
    'A': {'B': 4, 'C': 2},
    'B': {'A': 4, 'C': 1, 'D': 5},
    'C': {'A': 2, 'B': 1, 'D': 8, 'E': 10},
    'D': {'B': 5, 'C': 8, 'E': 2},
    'E': {'C': 10, 'D': 2}
}

# Starting node
start_node = 'A'

# Calculate distance vector, next hop, and path
distances, next_hop, path = dijkstra(graph, start_node)

# Print distance vector table, next hop, and shortest path for each node
print("Distance vector table for node", start_node)
print("--------------------------------")
print("| Node | Distance | Next Hop | Shortest Path |")
print("|------|----------|----------|---------------|")
for node, distance in distances.items():
    if next_hop[node] is None:
        next_hop_str = '-'
    else:
        next_hop_str = next_hop[node]
    shortest_path_str = ' -> '.join(path[node] + [node])
    print("|  {}  |{:>8}  |   {}    |   {}   |".format(node, distance, next_hop_str, shortest_path_str))
print("--------------------------------")
